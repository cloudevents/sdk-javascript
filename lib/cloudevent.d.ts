export = CloudEvent;
/**
 * An CloudEvent describes event data in common formats to provide
 * interopability across services, platforms and systems.
 * @see https://github.com/cloudevents/spec/blob/v1.0/spec.md
 */
declare class CloudEvent {
    /**
     * Creates a new CloudEvent instance
     * @param {object} options CloudEvent properties as a simple object
     * @param {string} options.source Identifies the context in which an event happened as a URI reference
     * @param {string} options.type Describes the type of event related to the originating occurrence
     * @param {string} [options.id] A unique ID for this event - if not supplied, will be autogenerated
     * @param {string} [options.time] A timestamp for this event. May also be provided as a Date
     * @param {string} [options.subject] Describes the subject of the event in the context of the event producer
     * @param {string} [options.dataContentType] The mime content type for the event data
     * @param {string} [options.dataSchema] The URI of the schema that the event data adheres to (v1.0 events)
     * @param {string} [options.schemaURL]  The URI of the schema that the event data adheres to (v0.3 events)
     * @param {string} [options.dataContentEncoding] The content encoding for the event data (v0.3 events)
     * @param {string} [options.specversion] The CloudEvent specification version for this event - default: 1.0
     * @param {*} [options.data] The event payload
     */
    constructor({ id, source, type, dataContentType, time, subject, dataSchema, schemaURL, dataContentEncoding, data, specversion }: {
        source: string;
        type: string;
        id?: string;
        time?: string;
        subject?: string;
        dataContentType?: string;
        dataSchema?: string;
        schemaURL?: string;
        dataContentEncoding?: string;
        specversion?: string;
        data?: any;
    });
    spec: import("./bindings/http/v1/spec_1.js") | import("./bindings/http/v03/spec_0_3.js");
    set source(arg: string);
    /**
     * Gets or sets the origination source of this event as a URI.
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#source-1
     */
    get source(): string;
    set type(arg: string);
    /**
     * Gets or sets the event type
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#type
     */
    get type(): string;
    set dataContentType(arg: string);
    /**
     * Gets or sets the content type of the data value for this event
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#datacontenttype
     */
    get dataContentType(): string;
    set data(arg: any);
    /**
     * Gets or sets the data for this event
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#event-data
     * @type {*}
     */
    get data(): any;
    set subject(arg: string);
    /**
     * Gets or sets the event subject
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/v1.0/spec.md#subject
     */
    get subject(): string;
    set dataSchema(arg: string);
    /**
     * Gets or sets the event's data schema
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/v1.0/spec.md#dataschema
     */
    get dataSchema(): string;
    set dataContentEncoding(arg: string);
    /**
     * Gets or sets the event's data content encoding
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/v0.3/spec.md#datacontentencoding
     */
    get dataContentEncoding(): string;
    set schemaURL(arg: string);
    /**
     * DEPRECATED: Gets or sets the schema URL for this event. Throws {TypeError}
     * if this is a version 1.0 event.
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/v0.3/spec.md#schemaurl
     */
    get schemaURL(): string;
    set id(arg: string);
    /**
     * Gets or sets the event id. Source + id must be unique for each distinct event.
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#id
     * @type {string}
    */
    get id(): string;
    set time(arg: string);
    /**
     * Gets or sets the timestamp for this event as an ISO formatted date string
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#time
     */
    get time(): string;
    formatter: import("./formats/json/formatter.js");
    /**
     * Gets the CloudEvent specification version
     * @type {string}
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#specversion
     */
    get specversion(): string;
    /**
     * Formats the CloudEvent as JSON. Validates the event according
     * to the CloudEvent specification and throws an exception if
     * it's invalid.
     * @returns {JSON} the CloudEvent in JSON form
     * @throws {ValidationError} if this event cannot be validated against the specification
     */
    format(): JSON;
    /**
     * Formats the CloudEvent as JSON. No specification validation is performed.
     * @returns {string} the CloudEvent as a JSON string
     */
    toString(): string;
    /**
     * Adds an extension attribute to this CloudEvent
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#extension-context-attributes
     * @param {string} key the name of the extension attribute
     * @param {*} value the value of the extension attribute
     * @returns {void}
     */
    addExtension(key: string, value: any): void;
    extensions: any;
    /**
     * Gets the extension attributes, if any, associated with this event
     * @see https://github.com/cloudevents/spec/blob/master/spec.md#extension-context-attributes
     * @returns {Object} the extensions attributes - if none exist will will be {}
     */
    getExtensions(): any;
}
